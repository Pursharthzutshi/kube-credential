name: Create EKS Cluster
on:
  workflow_dispatch:
    inputs:
      aws-region:
        description: AWS region
        required: true
        default: us-east-1
      cluster-name:
        description: EKS cluster name
        required: true
        default: zupple-eks
      node-instance-type:
        description: Node instance type
        required: true
        default: t3.medium
      nodes:
        description: Number of nodes
        required: true
        default: 2

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.aws-region }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install prerequisites (curl, tar)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl tar jq

      - name: Clean up failed CloudFormation stack if present
        run: |
          set -euo pipefail
          STACK_NAME="eksctl-${{ github.event.inputs.cluster-name }}-cluster"
          REGION="${{ github.event.inputs.aws-region }}"
          echo "Checking for CloudFormation stack: $STACK_NAME in region $REGION"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" >/dev/null 2>&1; then
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" --query "Stacks[0].StackStatus" --output text)
            echo "Found stack $STACK_NAME with status: $STATUS"
            if [[ "$STATUS" == "ROLLBACK_COMPLETE" || "$STATUS" == "CREATE_FAILED" || "$STATUS" == "ROLLBACK_IN_PROGRESS" || "$STATUS" == "DELETE_FAILED" ]]; then
              echo "Deleting failed/rolled-back stack $STACK_NAME..."
              aws cloudformation delete-stack --stack-name "$STACK_NAME" --region "$REGION"
              echo "Waiting for deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region "$REGION"
              echo "Deleted stack $STACK_NAME."
            elif [[ "$STATUS" == "CREATE_COMPLETE" || "$STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "Stack $STACK_NAME appears healthy (status: $STATUS)."
              echo "Assuming the cluster may already exist. Exiting so you can run deploy.yml instead."
              exit 0
            else
              echo "Stack $STACK_NAME exists with status $STATUS — not deleting automatically. Inspect in CloudFormation console."
              exit 1
            fi
          else
            echo "No existing CloudFormation stack named $STACK_NAME found. Proceeding to create cluster."
          fi

      - name: Install eksctl (official latest)
        run: |
          set -euo pipefail
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLo /tmp/eksctl.tar.gz "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_${PLATFORM}.tar.gz"
          tar -xzf /tmp/eksctl.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/eksctl
          rm -f /tmp/eksctl.tar.gz
          eksctl version

      - name: Create EKS cluster (eksctl — will wait until done)
        env:
          NODES: ${{ github.event.inputs.nodes }}
        run: |
          set -euo pipefail
          echo "Creating cluster ${CLUSTER_NAME} in ${AWS_REGION} (this may take ~10-30 minutes)..."
          if eksctl get cluster --region "${AWS_REGION}" --name "${CLUSTER_NAME}" >/dev/null 2>&1; then
            echo "Cluster ${CLUSTER_NAME} already exists according to eksctl. Exiting."
            exit 0
          fi
          eksctl create cluster \
            --name "${CLUSTER_NAME}" \
            --region "${AWS_REGION}" \
            --node-type "${{ github.event.inputs.node-instance-type }}" \
            --nodes "${NODES}" \
            --managed \
            --version 1.29

      - name: Verify cluster exists
        run: |
          set -euo pipefail
          echo "Describing cluster ${CLUSTER_NAME}..."
          aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
          echo "Cluster creation command completed. If the previous command returned cluster details, cluster is provisioning/active."

      - name: Show nodes (if kubeconfig can be updated)
        run: |
          set -euo pipefail
          echo "Attempting to update kubeconfig and list nodes (may succeed once control plane is ready)..."
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}" || true
          kubectl get nodes --no-headers || true

      - name: Final message
        run: |
          echo "If this workflow finished without error, the EKS cluster create command returned successfully."
          echo "It can take several minutes for nodegroups and nodes to become Ready. After the cluster is active, run your deploy workflow (deploy.yml)."
