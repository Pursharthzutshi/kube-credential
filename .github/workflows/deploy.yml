name: Deploy to EKS (app deployments)
on:
  workflow_dispatch:
    inputs:
      aws-region:
        description: AWS region
        required: true
        default: us-east-1
      cluster-name:
        description: EKS cluster name
        required: true
        default: zupple-eks
      node-instance-type:
        description: Node instance type
        required: false
        default: t3.medium

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.aws-region }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install tools (kubectl, jq)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sSLo kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-08-12/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Fetch / compute ECR URIs
        id: ecr
        run: |
          set -euo pipefail
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          FRONTEND="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-frontend"
          ISSUANCE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-issuance"
          VERIFICATION="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-verification"
          echo "frontend=$FRONTEND" >> $GITHUB_OUTPUT
          echo "issuance=$ISSUANCE" >> $GITHUB_OUTPUT
          echo "verification=$VERIFICATION" >> $GITHUB_OUTPUT

      - name: ECR Login
        run: |
          set -euo pipefail
          ACCOUNT_DOMAIN=$(echo "${{ steps.ecr.outputs.frontend }}" | cut -d'/' -f1)
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin "$ACCOUNT_DOMAIN"

      - name: Build and push images
        run: |
          set -euo pipefail
          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          echo "Building and pushing frontend..."
          docker build \
            --build-arg VITE_ISSUANCE_URL=http://issuance-service:4001 \
            --build-arg VITE_VERIFY_URL=http://verification-service:4002 \
            -t $FRONTEND_URI:latest ./frontend
          docker push $FRONTEND_URI:latest

          echo "Building and pushing issuance..."
          docker build -t $ISSUANCE_URI:latest ./backend/issuance-service
          docker push $ISSUANCE_URI:latest

          echo "Building and pushing verification..."
          docker build -t $VERIFICATION_URI:latest ./backend/verification-service
          docker push $VERIFICATION_URI:latest

      - name: Update kubeconfig
        run: |
          set -euo pipefail
          echo "Updating kubeconfig for cluster ${CLUSTER_NAME}..."
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl config current-context
          kubectl get nodes || true

      - name: Wait for node(s) to be ready
        run: |
          set -euo pipefail
          echo "Waiting for at least 1 ready node (up to ~10 minutes)..."
          for i in $(seq 1 30); do
            READY_NODES=$(kubectl get nodes --no-headers 2>/dev/null | grep -c ' Ready ' || true)
            echo "Attempt $i: $READY_NODES ready nodes"
            if [ "$READY_NODES" -ge 1 ]; then
              kubectl get nodes
              break
            fi
            sleep 20
          done
          READY_NODES=$(kubectl get nodes --no-headers 2>/dev/null | grep -c ' Ready ' || true)
          if [ "$READY_NODES" -lt 1 ]; then
            echo "ERROR: No nodes became ready after timeout"
            kubectl get nodes --show-labels || true
            exit 1
          fi

      - name: Apply Kubernetes manifests (with image substitution)
        run: |
          set -euo pipefail
          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          sed "s#yourdockerhub/kube-frontend:latest#$FRONTEND_URI:latest#g" k8s/frontend-deployment.yaml > /tmp/frontend.yaml
          sed "s#yourdockerhub/issuance-service:latest#$ISSUANCE_URI:latest#g" k8s/issuance-deployment.yaml > /tmp/issuance.yaml
          sed "s#yourdockerhub/verification-service:latest#$VERIFICATION_URI:latest#g" k8s/verification-deployment.yaml > /tmp/verification.yaml

          echo "Applying manifests..."
          kubectl apply -f k8s/mongo-deployment.yaml
          kubectl apply -f /tmp/issuance.yaml
          kubectl apply -f /tmp/verification.yaml
          kubectl apply -f /tmp/frontend.yaml

      - name: Show services & pods
        run: |
          echo "Services:"
          kubectl get svc -o wide || true
          echo ""
          echo "Pods:"
          kubectl get pods -o wide || true
          echo ""
          echo "Deploy finished."
