name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      aws-region:
        description: AWS region
        required: true
        default: us-east-1
      cluster-name:
        description: EKS cluster name
        required: true
        default: zupple-eks
      node-instance-type:
        description: Node instance type
        required: true
        default: t3.medium
      deploy-frontend:
        description: Deploy frontend component
        required: true
        default: 'false'
        type: choice
        options: ['true','false']
      deploy-issuance:
        description: Deploy issuance backend
        required: true
        default: 'true'
        type: choice
        options: ['true','false']
      deploy-verification:
        description: Deploy verification backend
        required: true
        default: 'true'
        type: choice
        options: ['true','false']

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.aws-region }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
      DEPLOY_FRONTEND: ${{ github.event.inputs.deploy-frontend }}
      DEPLOY_ISSUANCE: ${{ github.event.inputs.deploy-issuance }}
      DEPLOY_VERIFICATION: ${{ github.event.inputs.deploy-verification }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies (kubectl, jq, aws-iam-authenticator)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sSLo kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-08-12/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sSLo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.22/aws-iam-authenticator_0.6.22_linux_amd64
          chmod +x aws-iam-authenticator && sudo mv aws-iam-authenticator /usr/local/bin/

      - name: Create/Update CloudFormation stack (EKS + ECR) (best-effort)
        id: cfn_deploy
        run: |
          STACK_NAME=${CLUSTER_NAME}-stack

          # If stack exists, deploy update; if not, attempt create via deploy
          if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
            echo "Stack $STACK_NAME exists, updating..."
            aws cloudformation deploy \
              --template-file infra/eks-stack.yaml \
              --stack-name $STACK_NAME \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides \
                ClusterName=${CLUSTER_NAME} \
                KubernetesVersion=1.29 \
                NodeInstanceType=${{ github.event.inputs.node-instance-type }} || echo "CloudFormation deploy returned non-zero"
          elif aws cloudformation validate-template --template-body file://infra/eks-stack.yaml >/dev/null 2>&1; then
            echo "Stack $STACK_NAME does not exist. Attempting to create..."
            aws cloudformation deploy \
              --template-file infra/eks-stack.yaml \
              --stack-name $STACK_NAME \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides \
                ClusterName=${CLUSTER_NAME} \
                KubernetesVersion=1.29 \
                NodeInstanceType=${{ github.event.inputs.node-instance-type }} || echo "CloudFormation deploy returned non-zero"
          else
            echo "CloudFormation template validation failed or insufficient CFN perms. Will fallback to direct ECR creation later."
          fi

      - name: Fetch ECR repo URIs (CFN outputs preferred, fallback to convention)
        id: ecr
        run: |
          STACK_NAME=${CLUSTER_NAME}-stack
          FRONTEND=""
          ISSUANCE=""
          VERIFICATION=""

          if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
            echo "Using CloudFormation outputs for ECR URIs (if present)"
            FRONTEND=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
              --query 'Stacks[0].Outputs[?OutputKey==`FrontendEcrUri`].OutputValue' --output text 2>/dev/null || echo "")
            ISSUANCE=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
              --query 'Stacks[0].Outputs[?OutputKey==`IssuanceEcrUri`].OutputValue' --output text 2>/dev/null || echo "")
            VERIFICATION=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
              --query 'Stacks[0].Outputs[?OutputKey==`VerificationEcrUri`].OutputValue' --output text 2>/dev/null || echo "")
          else
            echo "CloudFormation describe-stacks failed or not permitted; using fallback URIs."
          fi

          # Fallback: construct expected URIs
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          [ -z "$FRONTEND" ] && FRONTEND="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-frontend"
          [ -z "$ISSUANCE" ] && ISSUANCE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-issuance"
          [ -z "$VERIFICATION" ] && VERIFICATION="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-verification"

          echo "frontend=$FRONTEND" >> $GITHUB_OUTPUT
          echo "issuance=$ISSUANCE" >> $GITHUB_OUTPUT
          echo "verification=$VERIFICATION" >> $GITHUB_OUTPUT

      - name: Ensure ECR repositories exist (create if missing + wait)
        run: |
          set -euo pipefail
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Account: $AWS_ACCOUNT_ID, Region: $AWS_REGION"

          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          REPOS=()
          if [ "${DEPLOY_FRONTEND}" = "true" ]; then REPOS+=("$FRONTEND_URI"); fi
          if [ "${DEPLOY_ISSUANCE}" = "true" ]; then REPOS+=("$ISSUANCE_URI"); fi
          if [ "${DEPLOY_VERIFICATION}" = "true" ]; then REPOS+=("$VERIFICATION_URI"); fi

          for URI in "${REPOS[@]}"; do
            REPO_NAME=$(echo "$URI" | cut -d'/' -f2)
            echo "Processing repo: $REPO_NAME"
            if aws ecr describe-repositories --repository-names "$REPO_NAME" --region $AWS_REGION >/dev/null 2>&1; then
              echo "OK: $REPO_NAME exists"
            else
              echo "Creating ECR repo: $REPO_NAME"
              aws ecr create-repository --repository-name "$REPO_NAME" --region $AWS_REGION || true
              # wait for visibility
              for i in {1..12}; do
                if aws ecr describe-repositories --repository-names "$REPO_NAME" --region $AWS_REGION >/dev/null 2>&1; then
                  echo "Confirmed: $REPO_NAME is available"
                  break
                fi
                echo "Waiting for $REPO_NAME to appear ($i/12)"
                sleep 3
              done
            fi
          done

      - name: ECR Login (robust)
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "Logging in to ECR registry: $REGISTRY"
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY

      - name: Preflight ECR check (debug)
        run: |
          set -euo pipefail
          echo "AWS region: $AWS_REGION"
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS account: $AWS_ACCOUNT_ID"

          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          echo "Resolved URIs (considering toggles):"
          if [ "$DEPLOY_FRONTEND" = "true" ]; then echo "  FRONTEND_URI=$FRONTEND_URI"; else echo "  FRONTEND skipped"; fi
          if [ "$DEPLOY_ISSUANCE" = "true" ]; then echo "  ISSUANCE_URI=$ISSUANCE_URI"; else echo "  ISSUANCE skipped"; fi
          if [ "$DEPLOY_VERIFICATION" = "true" ]; then echo "  VERIFICATION_URI=$VERIFICATION_URI"; else echo "  VERIFICATION skipped"; fi

          echo "Listing ECR repositories in $AWS_REGION..."
          aws ecr describe-repositories --region $AWS_REGION --query 'repositories[].repositoryName' --output text || true

          REPO_URIS=()
          if [ "$DEPLOY_FRONTEND" = "true" ]; then REPO_URIS+=("$FRONTEND_URI"); fi
          if [ "$DEPLOY_ISSUANCE" = "true" ]; then REPO_URIS+=("$ISSUANCE_URI"); fi
          if [ "$DEPLOY_VERIFICATION" = "true" ]; then REPO_URIS+=("$VERIFICATION_URI"); fi

          for REPO_URI in "${REPO_URIS[@]}"; do
            REPO_NAME=$(echo "$REPO_URI" | cut -d'/' -f2)
            if aws ecr describe-repositories --repository-names "$REPO_NAME" --region $AWS_REGION >/dev/null 2>&1; then
              echo "OK: Found repository $REPO_NAME"
            else
              echo "ERROR: Missing repository $REPO_NAME in $AWS_REGION for account $AWS_ACCOUNT_ID"
              exit 1
            fi
          done

      - name: Build and push images
        run: |
          set -euo pipefail
          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          if [ "$DEPLOY_FRONTEND" = "true" ]; then
            echo "Building frontend image -> $FRONTEND_URI:latest"
            docker build \
              --build-arg VITE_ISSUANCE_URL=http://issuance-service:4001 \
              --build-arg VITE_VERIFY_URL=http://verification-service:4002 \
              -t $FRONTEND_URI:latest ./frontend
            docker push $FRONTEND_URI:latest
          else
            echo "Skipping frontend build/push"
          fi

          if [ "$DEPLOY_ISSUANCE" = "true" ]; then
            echo "Building issuance image -> $ISSUANCE_URI:latest"
            docker build -t $ISSUANCE_URI:latest ./backend/issuance-service
            docker push $ISSUANCE_URI:latest
          else
            echo "Skipping issuance-service build/push"
          fi

          if [ "$DEPLOY_VERIFICATION" = "true" ]; then
            echo "Building verification image -> $VERIFICATION_URI:latest"
            docker build -t $VERIFICATION_URI:latest ./backend/verification-service
            docker push $VERIFICATION_URI:latest
          else
            echo "Skipping verification-service build/push"
          fi

      - name: Update kubeconfig
        run: |
          if aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION >/dev/null 2>&1; then
            echo "EKS cluster $CLUSTER_NAME exists, updating kubeconfig..."
            aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          else
            echo "ERROR: EKS cluster $CLUSTER_NAME does not exist!"
            echo "Please create the EKS cluster manually or request CloudFormation permissions."
            echo ""
            echo "To create manually (example):"
            echo "eksctl create cluster --name $CLUSTER_NAME --region $AWS_REGION --node-type ${{ github.event.inputs.node-instance-type }} --nodes 2"
            exit 1
          fi

      - name: Wait for nodegroup to be ready
        run: |
          for i in {1..30}; do
            READY_NODES=$(kubectl get nodes --no-headers 2>/dev/null | grep -c ' Ready ' || true)
            if [ "$READY_NODES" -ge 1 ]; then
              echo "Nodes are ready"
              break
            fi
            echo "Waiting for nodes... ($i/30)"
            sleep 20
          done

      - name: Apply Kubernetes manifests (with image substitution)
        run: |
          FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
          ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
          VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

          if [ "$DEPLOY_FRONTEND" = "true" ]; then
            sed "s#yourdockerhub/kube-frontend:latest#$FRONTEND_URI:latest#g" k8s/frontend-deployment.yaml > /tmp/frontend.yaml
          fi
          if [ "$DEPLOY_ISSUANCE" = "true" ]; then
            sed "s#yourdockerhub/issuance-service:latest#$ISSUANCE_URI:latest#g" k8s/issuance-deployment.yaml > /tmp/issuance.yaml
          fi
          if [ "$DEPLOY_VERIFICATION" = "true" ]; then
            sed "s#yourdockerhub/verification-service:latest#$VERIFICATION_URI:latest#g" k8s/verification-deployment.yaml > /tmp/verification.yaml
          fi

          kubectl apply -f k8s/mongo-deployment.yaml
          if [ "$DEPLOY_ISSUANCE" = "true" ]; then kubectl apply -f /tmp/issuance.yaml; else echo "Skipping issuance k8s apply"; fi
          if [ "$DEPLOY_VERIFICATION" = "true" ]; then kubectl apply -f /tmp/verification.yaml; else echo "Skipping verification k8s apply"; fi
          if [ "$DEPLOY_FRONTEND" = "true" ]; then kubectl apply -f /tmp/frontend.yaml; else echo "Skipping frontend k8s apply"; fi

      - name: Show services
        run: kubectl get svc -o wide
