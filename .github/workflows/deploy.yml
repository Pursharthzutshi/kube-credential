# name: Deploy to EKS

# on:
#   workflow_dispatch:
#     inputs:
#       aws-region:
#         description: AWS region
#         required: true
#         default: us-east-1
#       cluster-name:
#         description: EKS cluster name
#         required: true
#         default: zupple-eks
#       node-instance-type:
#         description: Node instance type
#         required: true
#         default: t3.medium

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     env:
#       AWS_REGION: ${{ github.event.inputs.aws-region }}
#       CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Install dependencies
#         run: |
#           sudo apt-get update -y
#           sudo apt-get install -y jq
#           curl -sSLo kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-08-12/bin/linux/amd64/kubectl
#           chmod +x kubectl && sudo mv kubectl /usr/local/bin/
#           curl -sSLo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.22/aws-iam-authenticator_0.6.22_linux_amd64
#           chmod +x aws-iam-authenticator && sudo mv aws-iam-authenticator /usr/local/bin/

#       - name: Create/Update CloudFormation stack (EKS + ECR)
#         run: |
#           STACK_NAME=${CLUSTER_NAME}-stack
          
#           # Test if we have basic CloudFormation permissions
#           if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
#             echo "Stack $STACK_NAME exists, updating..."
#             aws cloudformation deploy \
#               --template-file infra/eks-stack.yaml \
#               --stack-name $STACK_NAME \
#               --capabilities CAPABILITY_NAMED_IAM \
#               --parameter-overrides \
#                 ClusterName=${CLUSTER_NAME} \
#                 KubernetesVersion=1.29 \
#                 NodeInstanceType=${{ github.event.inputs.node-instance-type }}
#           elif aws cloudformation validate-template --template-body file://infra/eks-stack.yaml >/dev/null 2>&1; then
#             echo "Stack $STACK_NAME does not exist. Attempting to create..."
#             aws cloudformation deploy \
#               --template-file infra/eks-stack.yaml \
#               --stack-name $STACK_NAME \
#               --capabilities CAPABILITY_NAMED_IAM \
#               --parameter-overrides \
#                 ClusterName=${CLUSTER_NAME} \
#                 KubernetesVersion=1.29 \
#                 NodeInstanceType=${{ github.event.inputs.node-instance-type }}
#           else
#             echo "CloudFormation permissions insufficient. Creating ECR repositories directly..."
#             # Create ECR repositories directly without CloudFormation
#             aws ecr create-repository --repository-name ${CLUSTER_NAME}-frontend --region $AWS_REGION 2>/dev/null || echo "Frontend repo already exists"
#             aws ecr create-repository --repository-name ${CLUSTER_NAME}-issuance --region $AWS_REGION 2>/dev/null || echo "Issuance repo already exists"
#             aws ecr create-repository --repository-name ${CLUSTER_NAME}-verification --region $AWS_REGION 2>/dev/null || echo "Verification repo already exists"
#             echo "ECR repositories created. EKS cluster must be created manually or with proper CloudFormation permissions."
#           fi

#       - name: Fetch ECR repo URIs
#         id: ecr
#         run: |
#           STACK_NAME=${CLUSTER_NAME}-stack
          
#           # Check if we have CloudFormation describe permissions
#           if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
#             echo "Using CloudFormation to get ECR URIs"
#             FRONTEND=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
#               --query 'Stacks[0].Outputs[?OutputKey==`FrontendEcrUri`].OutputValue' --output text)
#             ISSUANCE=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
#               --query 'Stacks[0].Outputs[?OutputKey==`IssuanceEcrUri`].OutputValue' --output text)
#             VERIFICATION=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
#               --query 'Stacks[0].Outputs[?OutputKey==`VerificationEcrUri`].OutputValue' --output text)
#           else
#             echo "CloudFormation describe permission denied. Using ECR list-repositories as fallback"
#             # Fallback: construct ECR URIs using standard naming convention
#             AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
#             FRONTEND="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-frontend"
#             ISSUANCE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-issuance"
#             VERIFICATION="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-verification"
#           fi
          
#           echo "frontend=$FRONTEND" >> $GITHUB_OUTPUT
#           echo "issuance=$ISSUANCE" >> $GITHUB_OUTPUT
#           echo "verification=$VERIFICATION" >> $GITHUB_OUTPUT

#       - name: ECR Login
#         run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo "${{ steps.ecr.outputs.frontend }}" | cut -d'/' -f1)

#       - name: Build and push images
#         run: |
#           FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
#           ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
#           VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

#           docker build \
#             --build-arg VITE_ISSUANCE_URL=http://issuance-service:4001 \
#             --build-arg VITE_VERIFY_URL=http://verification-service:4002 \
#             -t $FRONTEND_URI:latest ./frontend
#           docker push $FRONTEND_URI:latest

#           docker build -t $ISSUANCE_URI:latest ./backend/issuance-service
#           docker push $ISSUANCE_URI:latest

#           docker build -t $VERIFICATION_URI:latest ./backend/verification-service
#           docker push $VERIFICATION_URI:latest

#       - name: Update kubeconfig
#         run: |
#           # Check if EKS cluster exists
#           if aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION >/dev/null 2>&1; then
#             echo "EKS cluster $CLUSTER_NAME exists, updating kubeconfig..."
#             aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
#           else
#             echo "ERROR: EKS cluster $CLUSTER_NAME does not exist!"
#             echo "Please create the EKS cluster manually or request CloudFormation permissions."
#             echo ""
#             echo "To create manually:"
#             echo "eksctl create cluster --name $CLUSTER_NAME --region $AWS_REGION --node-type ${{ github.event.inputs.node-instance-type }} --nodes 2 managed"
#             exit 1
#           fi

#       - name: Wait for nodegroup to be ready
#         run: |
#           for i in {1..30}; do
#             READY_NODES=$(kubectl get nodes --no-headers | grep -c ' Ready ' || true)
#             if [ "$READY_NODES" -ge 1 ]; then
#               echo "Nodes are ready"
#               break
#             fi
#             echo "Waiting for nodes... ($i)"
#             sleep 20
#           done

#       - name: Apply Kubernetes manifests (with image substitution)
#         run: |
#           FRONTEND_URI=${{ steps.ecr.outputs.frontend }}
#           ISSUANCE_URI=${{ steps.ecr.outputs.issuance }}
#           VERIFICATION_URI=${{ steps.ecr.outputs.verification }}

#           sed "s#yourdockerhub/kube-frontend:latest#$FRONTEND_URI:latest#g" k8s/frontend-deployment.yaml > /tmp/frontend.yaml
#           sed "s#yourdockerhub/issuance-service:latest#$ISSUANCE_URI:latest#g" k8s/issuance-deployment.yaml > /tmp/issuance.yaml
#           sed "s#yourdockerhub/verification-service:latest#$VERIFICATION_URI:latest#g" k8s/verification-deployment.yaml > /tmp/verification.yaml

#           kubectl apply -f k8s/mongo-deployment.yaml
#           kubectl apply -f /tmp/issuance.yaml
#           kubectl apply -f /tmp/verification.yaml
#           kubectl apply -f /tmp/frontend.yaml

#       - name: Show services
#         run: kubectl get svc -o wide

name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      aws-region:
        description: AWS region
        required: true
        default: ap-south-1
      cluster-name:
        description: EKS cluster name
        required: true
        default: kube-credential-cluster
      node-instance-type:
        description: Node instance type
        required: true
        default: t3.medium

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.aws-region }}
      CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl, kubectl, jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz"
          tar -xzf eksctl_$(uname -s)_amd64.tar.gz -C /usr/local/bin
          curl -sSLo kubectl https://s3.${AWS_REGION}.amazonaws.com/amazon-eks/1.29.0/2024-08-12/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          kubectl version --client
          eksctl version

      - name: Create EKS Cluster (if not exists)
        run: |
          if aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION >/dev/null 2>&1; then
            echo " EKS cluster $CLUSTER_NAME already exists."
          else
            echo "Creating new EKS cluster..."
            eksctl create cluster \
              --name $CLUSTER_NAME \
              --region $AWS_REGION \
              --nodegroup-name kube-nodes \
              --nodes 2 \
              --node-type ${{ github.event.inputs.node-instance-type }} \
              --managed \
              --version 1.29
          fi

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Verify EKS Nodes
        run: |
          echo "⏳ Waiting for EKS nodes to be ready..."
          for i in {1..30}; do
            READY_NODES=$(kubectl get nodes --no-headers | grep -c ' Ready ' || true)
            if [ "$READY_NODES" -ge 1 ]; then
              echo "✅ Nodes are ready."
              kubectl get nodes -o wide
              break
            fi
            echo "Waiting for nodes... ($i/30)"
            sleep 20
          done

      - name: ECR Login
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Ensure ECR Repositories
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          for repo in frontend issuance verification; do
            aws ecr describe-repositories --repository-names ${CLUSTER_NAME}-${repo} --region $AWS_REGION >/dev/null 2>&1 \
              || aws ecr create-repository --repository-name ${CLUSTER_NAME}-${repo} --region $AWS_REGION
          done

      - name: Build and Push Docker Images
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          FRONTEND_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-frontend
          ISSUANCE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-issuance
          VERIFICATION_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-verification

          echo "🚧 Building and pushing images..."
          docker build -t $FRONTEND_URI:latest ./frontend
          docker push $FRONTEND_URI:latest

          docker build -t $ISSUANCE_URI:latest ./backend/issuance-service
          docker push $ISSUANCE_URI:latest

          docker build -t $VERIFICATION_URI:latest ./backend/verification-service
          docker push $VERIFICATION_URI:latest

          echo "frontend=$FRONTEND_URI" >> $GITHUB_OUTPUT
          echo "issuance=$ISSUANCE_URI" >> $GITHUB_OUTPUT
          echo "verification=$VERIFICATION_URI" >> $GITHUB_OUTPUT

      - name: Apply Kubernetes Manifests (with image substitution)
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          FRONTEND_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-frontend
          ISSUANCE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-issuance
          VERIFICATION_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${CLUSTER_NAME}-verification

          sed "s#yourdockerhub/kube-frontend:latest#$FRONTEND_URI:latest#g" k8s/frontend-deployment.yaml > /tmp/frontend.yaml
          sed "s#yourdockerhub/issuance-service:latest#$ISSUANCE_URI:latest#g" k8s/issuance-deployment.yaml > /tmp/issuance.yaml
          sed "s#yourdockerhub/verification-service:latest#$VERIFICATION_URI:latest#g" k8s/verification-deployment.yaml > /tmp/verification.yaml

          kubectl apply -f k8s/mongo-deployment.yaml
          kubectl apply -f /tmp/issuance.yaml
          kubectl apply -f /tmp/verification.yaml
          kubectl apply -f /tmp/frontend.yaml

      - name: Verify Services and Get LoadBalancer URL
        id: geturl
        run: |
          echo "⏳ Waiting for LoadBalancer external IP..."
          for i in {1..30}; do
            EXTERNAL_URL=$(kubectl get svc frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$EXTERNAL_URL" ]; then
              echo " Frontend accessible at: http://$EXTERNAL_URL"
              echo "url=http://$EXTERNAL_URL" >> $GITHUB_OUTPUT
              break
            fi
            echo "Waiting for LoadBalancer IP... ($i/30)"
            sleep 20
          done

      - name: Display Deployed URL
        run: echo " Frontend available at: ${{ steps.geturl.outputs.url }}"
